#!/usr/bin/env python3.8
import argparse
import json
import os
from configparser import ConfigParser

from cdds.convert.exceptions import SuiteConfigMissingValueError
from cdds.convert.process.suite_interface import (check_svn_location,
                                                  checkout_url)


def checkout_suite():

    args = parse_args()
    print(vars(args))
    suite_url = "svn://fcm1/roses-u.xm_svn/c/q/8/0/5/{}".format(args.branch_name)

    if os.path.isdir(os.path.expanduser("~/roses/")):
        roses_directory = os.path.expanduser("~/roses/")
        suite_directory = os.path.join(roses_directory, "cdds.{}".format(args.suite_name))
        os.mkdir(suite_directory)
    else:
        raise BaseException
    print(suite_url)
    print(suite_directory)
    print(check_svn_location(suite_url))
    if check_svn_location(suite_url):
        checkout_url(suite_url, suite_directory)

    update_rose_conf(args, suite_directory)


def update_rose_conf(args, suite_directory):
    conf_file = os.path.join(suite_directory, "rose-suite.conf")
    options = [("request_file", "REQUEST_JSON_PATH", "env"),
               ("variables_file", "USER_VARIABLES_LIST", "env"),
               ("suite_base_name", "SUITE_BASE_NAME", "jinja2:suite.rc")]
    for option, mapping, section_name in options:
        if vars(args)[option]:
            kwargs = {mapping: vars(args)[option]}
            update_suite_conf_file(conf_file, kwargs, section_name)


def parse_args():
    args = argparse.ArgumentParser()
    args.add_argument('suite_name', help='The desired suite name.')
    args.add_argument('--branch_name', default="CDDSO-198_add_cdds_processingsuite_work", help='The branch name.')
    args.add_argument('--request_file', default=None)
    args.add_argument('--variables_file', default=None)
    args.add_argument('--suite_base_name', default=None)
    arguments = args.parse_args()

    return arguments


def update_suite_conf_file(filename, kwargs, section_name, delimiter="="):
    """
    Update the contents of a rose suite configuration file, on disk,
    based on supplied keywords.

    Parameters
    ----------
    filename : str
        Name of the file to update.
    delimiter : str, optional
        Character used for delimiting keys and values in the suite
        configuration file.

    Other keywords are used to specify changes to be made

    Returns
    -------
    list
        Each element is a 3-tuple with elements for the name of the
        field that is changed, the original value, and the new value.
    """
    parser = ConfigParser(delimiters=[delimiter])
    parser.optionxform = str
    parser.read(filename)
    section = parser[section_name]
    changes = []
    for field, new_value in kwargs.items():
        if field == "SUITE_BASE_NAME":
            new_value_str = json.dumps(new_value)
        else:
            new_value_str = new_value
        if field not in section:
            raise SuiteConfigMissingValueError('Field "{}" not found in "{}".'
                                               ''.format(field, filename))
        if section[field] != new_value_str:
            try:
                changes.append((field, str(section[field]),
                                str(new_value_str)))
                section[field] = new_value_str
            except TypeError as error:
                msg = ('Failed attempting to set field "{}" to "{}": '
                       '').format(field, repr(new_value))
                raise TypeError(msg + str(error))

    parser.write(open(filename, 'w'))
    return changes


if __name__ == "__main__":
    checkout_suite()
