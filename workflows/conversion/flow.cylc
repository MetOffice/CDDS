#!jinja2

[scheduler]
    UTC mode = True
    [[events]]
{% if EMAIL_NOTIFICATIONS %}
        mail events = inactivity timeout, stall, stall timeout, abort, shutdown
{% endif %}

[scheduling]
    cycling mode = {{ CALENDAR }}
    initial cycle point = {{ START_DATE }}
    final cycle point = {{ FINAL_CYCLE_POINT }}
    runahead limit = P5
    [[queues]]
        [[[default]]]
            limit = {{ PARALLEL_TASKS }}
        [[[concatenation_queue]]]
            limit = 1
            members = MIP_CONCATENATE_{{ ACTIVE_STREAM }}
    [[graph]]

{% for COMPONENT in STREAM_COMPONENTS %} # start loop #2 over components
    {% set SUFFIX = ACTIVE_STREAM ~ '_' ~ COMPONENT %}
    {% if RUN_EXTRACT %}
        R1 = """
            run_extract_{{ ACTIVE_STREAM }}
        {% if RUN_EXTRACT_VALIDATION %}
            => validate_extract_{{ ACTIVE_STREAM }}
        {% endif %}
            => setup_output_dir_{{ ACTIVE_STREAM }}
        """
    {% else %}
        {% if RUN_EXTRACT_VALIDATION %}
        R1 = """
            validate_extract_{{ ACTIVE_STREAM }} => setup_output_dir_{{ ACTIVE_STREAM }}
        """
        {% endif %}
    {% endif %}

    {% if DO_CONVERT_ALIGNMENT_CYCLE %}
        R1 = """
            setup_output_dir_{{ ACTIVE_STREAM }} => initialiser_{{ ACTIVE_STREAM }} => mip_convert_first_{{ SUFFIX }}
            mip_convert_first_{{ SUFFIX }} => finaliser_{{ ACTIVE_STREAM }}
        """
        R1/^+{{ CONVERT_ALIGNMENT_OFFSET }} = """
            setup_output_dir_{{ ACTIVE_STREAM }}[-{{ CONVERT_ALIGNMENT_OFFSET }}] => initialiser_{{ ACTIVE_STREAM }} => mip_convert_{{ SUFFIX }}
        """
    {% else %} # else - if DO_CONVERT_ALIGNMENT
        R1 = """
            setup_output_dir_{{ ACTIVE_STREAM }} => initialiser_{{ ACTIVE_STREAM }} => mip_convert_{{ SUFFIX }}
        """
    {% endif %} # endif - if DO_CONVERT_ALIGNMENT

        R/^+{{ CONVERT_ALIGNMENT_OFFSET }}/{{ CYCLING_FREQUENCY }} = """
            initialiser_{{ ACTIVE_STREAM }} => mip_convert_{{ SUFFIX }} => finaliser_{{ ACTIVE_STREAM }}
        """
        # Run first three cycles sequentially to gather resource data points.
        R3/^+{{ CONVERT_ALIGNMENT_OFFSET }}/{{ CYCLING_FREQUENCY }} = """
            finaliser_{{ ACTIVE_STREAM }}[-{{ CYCLING_FREQUENCY }}] => initialiser_{{ ACTIVE_STREAM }}
        """

{% endfor %} # end loop #2 over components

{% if DO_CONVERT_ALIGNMENT_CYCLE %}
        R1/^+{{ CONVERT_ALIGNMENT_OFFSET }} = """
            initialiser_{{ACTIVE_STREAM}}[-{{CONVERT_ALIGNMENT_OFFSET}}] => initialiser_{{ACTIVE_STREAM}}
            finaliser_{{ ACTIVE_STREAM }}[-{{ CONVERT_ALIGNMENT_OFFSET }}] => finaliser_{{ ACTIVE_STREAM }}
        """
{% endif %}

        R/^+{{ CONVERT_ALIGNMENT_OFFSET }}/{{ CYCLING_FREQUENCY }} = """
            initialiser_{{ ACTIVE_STREAM }}[-{{CYCLING_FREQUENCY}}] => initialiser_{{ ACTIVE_STREAM }}
            finaliser_{{ ACTIVE_STREAM }}[-{{ CYCLING_FREQUENCY }}] => finaliser_{{ ACTIVE_STREAM }}
        """

{% if SINGLE_CONCATENATION_CYCLE %}
        R1/^+{{ CONCATENATION_FIRST_CYCLE_OFFSET }} = """
{% else %}
        R/^+{{ CONCATENATION_FIRST_CYCLE_OFFSET }}/{{ CONCATENATION_WINDOW }} = """
{% endif %}
            finaliser_{{ ACTIVE_STREAM }} =>
            organise_files_{{ ACTIVE_STREAM }} =>
            mip_concatenate_setup_{{ ACTIVE_STREAM }} =>
            mip_concatenate_batch_{{ ACTIVE_STREAM }}
        """

{% if DO_FINAL_CONCATENATE %}
        R1/^+{{ FINAL_CONCATENATION_CYCLE }} = """
            finaliser_{{ ACTIVE_STREAM }} =>
            organise_files_final_{{ ACTIVE_STREAM }} =>
            mip_concatenate_setup_{{ ACTIVE_STREAM }} =>
            mip_concatenate_batch_{{ ACTIVE_STREAM }}
        """
{% endif %} # endif DO_FINAL_CONCATENATE

{% if RUN_QC %}
        R1/^+{{ FINAL_CONCATENATION_CYCLE }} = """
            mip_concatenate_batch_{{ ACTIVE_STREAM }} => run_qc_{{ ACTIVE_STREAM }}
    {% if RUN_TRANSFER %}
            run_qc_{{ ACTIVE_STREAM }} => run_transfer_{{ ACTIVE_STREAM }}
    {% endif %}
        """
{% endif %}

        R1/^+{{ FINAL_CONCATENATION_CYCLE }} = """
            COMPLETION_FAM:succeed-all => completion_{{ ACTIVE_STREAM }}
        """


[runtime]
    [[root]]
        script = rose task-run --verbose
        execution time limit = PT{{WALL_TIME[0]}}H{{WALL_TIME[1]}}M
        [[[events]]]
            mail events = submission timeout, execution timeout
        [[[environment]]]
            CALENDAR = {{CALENDAR}}
            START_DATE = `cylc cycle-point` # Maybe this should be renamed?
            END_DATE = {{END_DATE}}
            MODEL_ID = {{MODEL_ID}}
            CDDS_VERSION = {{CDDS_VERSION}}
{% if DEV_MODE %}
            CDDS_DIR = {{ CDDS_DIR }}
            SETUP_CMD = $CDDS_DIR/setup_env_for_devel $CDDS_DIR
{% else %}
            SETUP_CMD = ~cdds/bin/setup_env_for_cdds {{CDDS_VERSION}}
{% endif %}

    [[SPICE]]
        platform = spice
        submission retry delays = PT1M, PT1M, PT1M
        [[[directives]]]
            --mem={{ MEMORY_DEFAULT }}
            --wckey=CDDS
            --partition={{OS_PARTITION}}
    [[LOTUS]]
        platform = lsf
        [[[directives]]]
            -q = short-serial
            -R = "rusage[mem={{ MEMORY_DEFAULT }}]"
            -C = 0
    [[COMPLETION_FAM]]
    [[MIP_CONVERT_{{ACTIVE_STREAM}}]]
        execution retry delays = PT1M, PT3M, PT5M
        [[[directives]]]
            # Allocate an amount of temp space in MB for mip_convert
            # processing.
            --gres=tmp:{{MIP_CONVERT_TMP_SPACE}}
        [[[environment]]]
            ROSE_TASK_APP = mip_convert
            ALLOCATED_TMPDIR_SPACE_IN_MB = {{MIP_CONVERT_TMP_SPACE}}

    [[MIP_CONCATENATE_{{ACTIVE_STREAM}}]]
        execution retry delays = PT1M, PT3M, PT5M
        [[[environment]]]
            NTHREADS = {{ NTHREADS_CONCATENATE }}
            PROC_DIR = {{ CDDS_CONVERT_PROC_DIR }}
            TIMESTAMP = `date +%FT%T`
            TASK_DB_PATH= {{CDDS_CONVERT_PROC_DIR}}/mip_concatenate_{{ACTIVE_STREAM}}_${CYLC_TASK_CYCLE_POINT}.db
            CONCAT_CFG_PATH = {{CDDS_CONVERT_PROC_DIR}}/mip_concatenate_setup_{{ACTIVE_STREAM}}_${CYLC_TASK_CYCLE_POINT}.cfg

    [[finaliser_{{ ACTIVE_STREAM }}]]
        platform = localhost
        script = """
        echo ${SETUP_CMD}
        set +u # avoid _CONDA_SET_UDUNITS2_XML_PATH unbound variable
        source ${SETUP_CMD}
        set -u
        update_directives
        """

    [[initialiser_{{ ACTIVE_STREAM }}]]
        script = true

    [[setup_output_dir_{{ ACTIVE_STREAM }}]]
{% set BASE_OUTPUT = OUTPUT_DIR ~ '/' ~ ACTIVE_STREAM  %}
{% set BASE_MIP_CONVERT = OUTPUT_DIR ~ '/' ~ ACTIVE_STREAM ~ '_mip_convert' %}
{% set BASE_CONCAT = OUTPUT_DIR ~ '/' ~ ACTIVE_STREAM ~ '_concat' %}

# Create 3 fresh directories, for mip_convert output, staging the output
# for concatenation, and concatenation output.
    [[setup_output_dir_{{ ACTIVE_STREAM }}]]
        script = """
rm -rf {{ BASE_MIP_CONVERT }}
mkdir -p {{ BASE_MIP_CONVERT }}
rm -rf {{ BASE_CONCAT }}
mkdir -p {{ BASE_CONCAT }}
rm -rf {{ BASE_OUTPUT }}
mkdir -p {{ BASE_OUTPUT }}
"""

    [[ORGANISE_FILES_{{ACTIVE_STREAM}}]]
        inherit = MIP_CONCATENATE_{{ACTIVE_STREAM}}, SPICE
        [[[environment]]]
            ROSE_TASK_APP = organise_files
            MIP_CONVERT_OUT_DIR = {{ BASE_MIP_CONVERT }}
            STAGING_DIR = {{ BASE_CONCAT }}
            OUTPUT_DIR = {{ BASE_OUTPUT }}
            CALENDAR = {{CALENDAR}}
            REF_DATE = {{ REF_DATE }}
            STREAM = {{ ACTIVE_STREAM }}

    [[organise_files_{{ACTIVE_STREAM}}]]
        inherit = ORGANISE_FILES_{{ACTIVE_STREAM}}
        [[[environment]]]
{% if SINGLE_CONCATENATION_CYCLE %}
            START_DATE = {{START_DATE}}
            END_DATE = {{END_DATE}}
{% else %}
            START_DATE = $(rose date --print-format='%Y%m%d' $CYLC_TASK_CYCLE_POINT --offset=-{{CONCATENATION_WINDOW}} --offset={{CYCLING_FREQUENCY}})
            END_DATE = $(rose date --print-format='%Y%m%d' $CYLC_TASK_CYCLE_POINT --offset={{CYCLING_FREQUENCY}} --offset=-P1Y)
{% endif %}

{% if DO_FINAL_CONCATENATE %}
    [[organise_files_final_{{ACTIVE_STREAM}}]]
        inherit = ORGANISE_FILES_{{ACTIVE_STREAM}}
        [[[environment]]]
            START_DATE = $(rose date --print-format='%Y%m%d' {{ FINAL_CONCATENATION_WINDOW_START }} )
            END_DATE = $(rose date --print-format='%Y%m%d' $CYLC_TASK_CYCLE_POINT --offset={{CYCLING_FREQUENCY}} --offset=-P1Y)
{% endif %}

    [[mip_concatenate_setup_{{ACTIVE_STREAM}}]]
        inherit = MIP_CONCATENATE_{{ACTIVE_STREAM}}, SPICE
        [[[environment]]]
            ROSE_TASK_APP = concatenate_setup
            STREAM = {{ ACTIVE_STREAM }}
            {% if USE_EXTERNAL_PLUGIN %}
                PLUGIN_OPTION='--plugin_id {{PLUGIN_ID}} --external_plugin {{EXTERNAL_PLUGIN}} --external_plugin_location {{EXTERNAL_PLUGIN_LOCATION}}'
            {% else %}
                PLUGIN_OPTION='--plugin_id {{PLUGIN_ID}}'
            {% endif %}
    [[mip_concatenate_batch_{{ ACTIVE_STREAM }}]]
        inherit = MIP_CONCATENATE_{{ACTIVE_STREAM}}, SPICE, COMPLETION_FAM
        execution time limit = P2D
        [[[directives]]]
            --ntasks={{ NTHREADS_CONCATENATE }}
            --qos=long
        [[[environment]]]
            ROSE_TASK_APP = concatenate_batch
            STREAM = {{ ACTIVE_STREAM }}
{% for COMPONENT in STREAM_COMPONENTS %} # start loop #4 over components
         {% set SUFFIX = ACTIVE_STREAM ~ '_' ~ COMPONENT %}

    [[MIP_CONVERT_{{ SUFFIX  }}]]
        inherit = MIP_CONVERT_{{ACTIVE_STREAM}}, SPICE
        [[[environment]]]
            STREAM = {{ ACTIVE_STREAM }}
            COMPONENT = {{ COMPONENT }}
            SUBSTREAM = {{ STREAM_SUBSTREAMS[COMPONENT] }}
            INPUT_DIR = {{ INPUT_DIR }}
            OUTPUT_DIR = {{ BASE_MIP_CONVERT }}/`cylc cycle-point --template=CCYY-MM-DD`
            STREAM_TIME_OVERRIDES = {{ STREAM_TIME_OVERRIDES }}
            DUMMY_RUN = {{DUMMY_RUN}}
            SUITE_NAME = {{ TARGET_SUITE_NAME }}
            REQUEST_CONFIG_PATH = {{REQUEST_CONFIG_PATH}}

        {% if USE_LOCAL_STORAGE %}
	        STAGING_DIR=$TMPDIR
        {% endif %}
        [[[directives]]]
            --mem={{ MEMORY_CONVERT[COMPONENT] }}

    {% if DO_CONVERT_ALIGNMENT_CYCLE %}
    [[mip_convert_first_{{SUFFIX}}]]
        inherit = MIP_CONVERT_{{ SUFFIX  }}
        [[[environment]]]
            CYCLE_DURATION = {{ CONVERT_ALIGNMENT_OFFSET }}

    {% endif %}

    [[mip_convert_{{SUFFIX}}]]
        inherit = MIP_CONVERT_{{ SUFFIX  }}
        [[[environment]]]
            CYCLE_DURATION = {{ CYCLING_FREQUENCY }}


{% endfor %} #end loop #4 over components

    [[RUN_CDDS_SUBTASK]]
        [[[environment]]]
            ROOT_PROC_DIR = {{ROOT_PROC_DIR}}
            ROOT_DATA_DIR = {{ROOT_DATA_DIR }}
            STREAM = {{ACTIVE_STREAM}}
            REQUEST_CONFIG_PATH = {{REQUEST_CONFIG_PATH}}

{% if RUN_EXTRACT %}
    [[run_extract_{{ACTIVE_STREAM}}]]
        inherit = SPICE, RUN_CDDS_SUBTASK
        execution retry delays = PT1H, PT1H, PT1H
        execution time limit = P2D
        [[[environment]]]
            ROSE_TASK_APP=run_extract
        [[[directives]]]
            --mem={{MEMORY_EXTRACT}}
            --ntasks=1
            --qos=long
{% endif %}

{% if RUN_EXTRACT_VALIDATION %}
    [[validate_extract_{{ACTIVE_STREAM}}]]
        inherit = SPICE, RUN_CDDS_SUBTASK
        [[[environment]]]
            ROSE_TASK_APP=validate_extract
        [[[directives]]]
            --mem={{MEMORY_QC}}
            --ntasks=1
{% endif %}

{% if RUN_QC %}
    [[run_qc_{{ACTIVE_STREAM}}]]
        inherit = SPICE, RUN_CDDS_SUBTASK, COMPLETION_FAM
        [[[environment]]]
            ROSE_TASK_APP=run_qc
        [[[directives]]]
            --mem={{MEMORY_QC}}
            --ntasks=1
{% endif %}

{% if RUN_TRANSFER %}
    [[run_transfer_{{ACTIVE_STREAM}}]]
        inherit = SPICE, RUN_CDDS_SUBTASK, COMPLETION_FAM
        [[[environment]]]
            ROSE_TASK_APP=run_transfer
            OUTPUT_MASS_ROOT={{OUTPUT_MASS_ROOT}}
            OUTPUT_MASS_SUFFIX={{OUTPUT_MASS_SUFFIX}}
            DATA_VERSION={{ARCHIVE_DATA_VERSION}}
        [[[directives]]]
            --mem={{MEMORY_TRANSFER}}
            --ntasks=1
{% endif %}

    [[completion_{{ACTIVE_STREAM}}]]
        script = sleep 5
