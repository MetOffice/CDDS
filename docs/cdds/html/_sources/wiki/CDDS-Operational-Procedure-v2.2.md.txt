# CDDS Operational Procedure (v2.2)

The definitions of the italicised phrases can be found in the [Glossary](https://code.metoffice.gov.uk/doc/cdds/mip_convert/html/glossary.html).

Use `<script> -h` or `<script> --help` to print information about the script, including available parameters. 

A simulation for the pre-industrial control from UKESM will be used as an example in these instructions.

## Changes relative to CDDS v2.1

* All model and project based configuration information has been centralised in CDDS common and can be extended at run time.
* Plugins can now be used add new projects and models without code changes to CDDS.
  * _Page on how this works needed_
  * Example plugin: https://github.com/matthew-mizielinski/arise-cmor-tables/tree/master/cdds_arise
  * Plugin activated by including `"external_plugin": "cdds_arise.arise_plugin",` field in request JSON
  * Corresponding code must be available to import for all CDDS tools, to achieve this include  the path to the external plugin in a file named `/.local/lib/python3.8/site-packages/cdds.pth` within your home directory. You should be able to import the plugin by activating the CDDS environment, and importing your module.
  

## Requirements

* Before running the CDDS Operational Procedure, please ensure that:
  * you own a _CDDS operational simulation ticket_ (see the [list of CDDS operational simulation tickets](https://code.metoffice.gov.uk/trac/cdds/wiki/CMIP6Simulations)) that will monitor the processing of a CMIP6 simulation using CDDS.
  * you belong to the `cdds` group (type `groups` on the command line to print the groups a user is in)
  * you have write permissions to `moose:/adhoc/projects/cdds/` on MASS, i.e. is your moose username included in the access control list output by the command
    ```bash
    moo getacl moose:/adhoc/projects/cdds
    ```
  * you use a bash shell. CDDS uses Conda. Conda can experience problems when running in any other shells except of bash.
    You can check which shell you use by following command:
    ```bash
    echo $SHELL
    ```
  * If the result is not ```/bin/bash```, you can switch to a bash shell by running:
    ```bash
    /bin/bash
    ```
   * If any of the above are not true, please contact the [CDDS Team](mailto:cdds@metoffice.gov.uk).

Previously a `.cdds_credentials` file was required in order to connect to CREM, but this is no longer required for CDDS users following the retirement of CREM.

### Partial processing of a simulation

In certain circumstances it may be desirable to process and submit a subset of an entire simulation, i.e. the first 250 years of the `esm-piControl` simulation. Please contact the [CDDS Team](mailto:cdds@metoffice.gov.uk) to discuss this prior to starting processing to 

1. Get appropriate guidance on the steps needed to correctly construct the requested variables file in CDDS Prepare
2. Arrange for an appropriate [Errata](https://errata.es-doc.org/static/index.html) to be issued following submission of data sets.

### What to do when things go wrong

On occasion issues will arise with tasks performed by users of CDDS and these will trigger `CRITICAL` error messages in the logs and usually require user intervention. Many simple issues (MASS/MOOSE or file system problems) can be resolved by re-triggering tasks.
When you take any action please ensure that you update your _CDDS operational simulation ticket_ and if support is needed contact the [CDDS Team](mailto:cdds@metoffice.gov.uk).

# Set up the CDDS operational simulation ticket

* **Ticket**: Select `start work` on the _CDDS operational simulation ticket_ (so that the status is `in_progress`) to indicate that work is starting. 


# Activate the CDDS install

1. Setup the environment to use the central installation of CDDS and its dependencies:
    ```bash
    source ~cdds/bin/setup_env_for_cdds <cdds_version>
    ```
    where `<cdds_version>` is the version of CDDS you wish to use, e.g. `2.1.0`. Unless instructed otherwise 
    you should use the most recent version of CDDS available (to ensure that all bugfixes are picked up), and 
    this version should be used in all stages of the package being processed. If in doubt contact the CDDS team 
    for advice.

1. **Ticket**: Record the version of CDDS being used on the _CDDS operational simulation ticket_.

Notes: 
 * The available version numbers for this script can be found [here](https://code.metoffice.gov.uk/trac/cdds/browser/main/tags), but the above command may lead to unexpected results if you attempt activate versions before `1.1.2`.
 * If you wish to deactivate the CDDS environment then you can use the command `conda deactivate`.

## Run CDDS Prepare

### Create the request JSON file

Following the retirement of CREM the request JSON file is constructed from information in the `rose-suite.info` files within each suite. 

**IMPORTANT: if the rose-suite.info file contains incorrect information this will be propagated through CDDS. As such it is critically important that the information in these files is correct**

To construct the request JSON file take the following steps

1. Set up a working directory
    ```bash
    mkdir cdds-example-1
    cd cdds-example-1
    export WORKING_DIR=`pwd`
    ```
    Add the location of your working directory to the _CDDS operational simulation ticket_.

2. Collect required information on the rose suite for the simulation;
    * suite id, e.g. `u-aw310`
    * branch, e.g. `cdds`
    * revision; If in doubt use the following command to find the latest revision of the suite branch
      ```bash
      rosie lookup --prefix=u --query project eq u-cmip6 and idx eq <suite id> and branch eq <branch>
      ```
3. Create the request JSON file;
    ```bash
    write_rose_suite_request_json <suite id> <branch> <revision> <package name> [<list of streams>]
    ```
    e.g.
    ```bash
    write_rose_suite_request_json u-aw310 cdds 115492 round-20 ap4 ap5 ap6 onm inm
    ```
    If necessary the start and end dates for processing can be overridden using the `--start_date` and `--end_date` arguments. Please consult with the [CDDS Team](mailto:cdds@metoffice.gov.uk) if you believe this is necessary.

4. For information: the log file and request JSON file are written to the current working directory

### Create the CDDS directory structure

1. Create the CDDS directory structure for the simulation; the data are stored in `<root_data_dir>` (== `/project/cdds_data/`), while the processing artefacts (e.g. logs) are stored separately in `<root_proc_dir>` (== `/project/cdds/proc/`) in directories specific to each CDDS component:
    ```bash
    create_cdds_directory_structure request.json
    ```
2. For information: the log file is written to the current working directory and instructions on how to set up 
   symbolic links is written to the terminal.
3. Set some useful environmental variables to access the directories:
     ```bash
     export CDDS_PROC_DIR=/<root_proc_dir>/<mip_era>/<mip>/<model_id>_<experiment_id>_<variant_label>/<package>/
     export CDDS_DATA_DIR=/<root_data_dir>/<mip_era>/<mip>/<model_id>/<experiment_id>/<variant_label>/<package>/
    ls $CDDS_PROC_DIR
    ls $CDDS_DATA_DIR
    ```
    Example:
    ```bash
    export CDDS_PROC_DIR=/project/cdds/proc/CMIP6/CMIP/UKESM1-0-LL_piControl_r1i1p1f2/cdds-example-1
    export CDDS_DATA_DIR=/project/cdds_data/CMIP6/CMIP/UKESM1-0-LL/piControl/r1i1p1f2/cdds-example-1
    ```
    Symbolic links can be used to persist these paths across sessions:
    ```bash
    ln -s $CDDS_PROC_DIR proc
    ln -s $CDDS_DATA_DIR data
    ```

### Generate the _requested variables list_

1. Generate the _requested variables list_ for the simulation:
    ```bash
    prepare_generate_variable_list request.json -p
    ```
1. Run the following command to identify critical issues; add any output to a [new ticket](https://code.metoffice.gov.uk/trac/cdds/newticket?milestone=Backlog&component=CDDS+Prepare&summary=Critical+issues+from+CDDS+Prepare+for+CMIP6+simulation+%3Cmodel_id%3E+%3Cexperiment_id%3E+%3Cvariant_id%3E):
    ```bash
    grep CRITICAL $CDDS_PROC_DIR/prepare/log/prepare_generate_variable_list_<datetime>.log 
    ```
    where `<datetime>` is of the form `YYYY-MM-DDTHHMMZ` then add a comment to the _CDDS operational 
    simulation ticket_ specifying the ticket number of the new ticket (`#<ticket_number>`)
1. For information: the _requested variables list_ is written to `$CDDS_PROC_DIR/prepare/`
1. If additional variables are required beyond what is specified in the CMIP6 data request contact [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice.
1. **Ticket**: Add a comment to the _CDDS operational simulation ticket_ specifying that CDDS Prepare has been completed.

**Note: any alterations to the variable list, for example inserting extra variables, must be done at this point**. Discuss this with the [CDDS Team](mailto:cdds@metoffice.gov.uk) if you require guidance.

### Optional: Processing specific variables

If running the processing of specific variables note that the following commands can be used:

* Restrict processing to a selection of variables (i.e. switch every other variable off
  ```bash
  prepare_select_variables <requested variables file> \
  [<mip_table/variable1> <mip_table/variable2> ...]
  ```
* Insert a set of variables not already present
  ```bash
  prepare_alter_variable_list <requested variables file> insert \
  [<mip_table/variable1> <mip_table/variable2> ...] \
  "Comment describing why this change has been made"
  ```

Particular care must be taken when constructing inserting or selecting variables as the MIP table and variable names must be correctly specified for this to function.

**Important**: If used please record these commands on the _CDDS operational simulation ticket_.

### For Information: Interpreting the requested variables file

The requested variables file is a JSON format file with metadata and a list of entries for each variable connected with the experiment in the Data Request. This file can be converted to a table using

  ```bash
  create_variables_table_file <requested variables file> <table file name>
  ```

which can then be viewed as text, imported into excel or otherwise manipulated. The following process may be used to list the variables that are active, i.e. CDDS will try to produce them;

  ```bash
  # Create table file (tab separated text)
  create_variables_table_file <requested variables file> table.txt
  # Select first three columns of table; 
  #   MIP table, variable name and active status (True/False)
  cut -f1-3 table.txt | grep True
  ```

Note that whether the variables listed are attempted by a run through of CDDS depends on which streams (which are loosely associated with frequency) are included when constructing the request JSON file.

**Important: do not try to edit the requested variables file by hand.** This will render the file unreadable as CDDS will validate checksums within the file before running. This is intended to ensure that the motivation for any changes is properly recorded.

## Run CDDS Convert
### Launch CDDS Convert Processes

Following changes at v2.1.0 all subsequent CDDS components are executed as part of `cdds_convert` by default with the exception of the final [#RunCDDSTeardown Tear Down] step.

1. **If running production work** launch CDDS Convert using
    ```bash
    cdds_convert request.json --output_mass_suffix production
    ```
   If work is for testing, development or training **you must omit the `--output_mass_suffix` argument**  
1. For information Streams can be sub-selected using the `--streams` argument and there are also arguments that can be used to alter the default cycling frequencies and memory limits.
1. For information: For each stream for which there is work required, i.e. the name of the stream was included when creating the request JSON file and there are active variables requiring that stream in the _requested variables file_ produced by CDDS Prepare, a cylc suite will be launched.

### Monitor conversion suites

Each of the suites launched by CDDS Convert requires monitoring. This can be done using the command line tool `cylc gscan` to obtain a window with an updating summary of suites progress or equivalently the [Cylc Review](http://fcm1/cylc-review/) online tools.
Conversion suites will usually be named `cdds_<model id>_<experiment id>_<variant_label>_<stream>` and each stream will run completely independently.
If a suite has issues, due to task failure, it will stall and you will receive an e-mail.

If you hit issues or are unsure how to proceed update the _CDDS operational simulation ticket_ for your package with anything you believe is relevant (include the location of your working directory) and contact the [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice.

The conversion suites run the following steps

* `run_extract_<stream>`
  * Run CDDS Extract for this stream. 
  * Runs in `long` queue with a wall time of 2 days.
  * If there are any issues they will be reported in the `job.err` log file in the suite and the 
  `$CDDS_PROC_DIR/extract/log/cdds_extract_<stream>_<date stamp>.log` log file and the **task will fail**. 
  * The extraction task will not automatically resubmit if it fails and manual intervention is required to proceed.
  * Most issues are related to either MASS (i.e. moo commands failing), file system anomalies (failure to create files /directories) or running out of time.
  * Identify issues using 
    ```bash 
    grep CRITICAL $CDDS_PROC_DIR/extract/log/cdds_extract_<stream>_<date stamp>.log
    ```
  * If the issue appears to be due to MASS issues you can re-run the failed CDDS Extract job by re-triggering the `run_extract_<stream>` task via the cylc gui or via the cylc command line tools;
    ```bash
    cylc trigger cdds_<model id>_<experiment id>_<variant label>_<stream> run_extract_<stream>:failed
    ```
  * If in doubt update your _CDDS operational simulation ticket_ and contact [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice.

* `setup_output_dir_<stream>` 
  * Create output directories for conversion output

* `mip_convert_<stream>_<grid group>`
   * Run MIP Convert to produce output files for a small time window for this simulation.
   * Will retry up to 3 times before suite stalls.
   * CRITICAL issues are appended to `$CDDS_PROC_DIR/convert/log/critical_issues.log` (this file will not exist if no critical issues arise). These will likely need user action to correct for -- update your _CDDS operational simulation ticket_ and contact [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice.
   * A variant named `mip_convert_first_<stream>_<grid group>` may be launched to align the cycling dates with the concatenation processing.
* `finaliser_<stream>`
  * Ensures that concatenation tasks are launched once all MIP Convert tasks have been successfully performed for a particular time range. _Should_ never fail
* `organise_files_<stream>` 
  * Re-arranges the output files on disk from a directory structure created by the MIP Convert tasks of the form 
    ```bash
    $CDDS_DATA_DIR/output/<stream>_mip_convert/<YYYY-MM-DD>/<grid>/<files>
     ```
     to 
     ```bash
     $CDDS_DATA_DIR/output/<stream>_concat/<MIP table>/<variable name>/<files>
     ```
   * ready for concatenation. A variation named `organise_files_final_<stream>` does the same thing but at the end of the conversion process.
*  `mip_concatenate_setup_<stream>`
   * construct a list of concatenation jobs that must be performed
* `mip_concatenate_batch_<stream>`
   * Perform the concatenation commands (`ncrcat`) required to join small files together. 
   * Runs in `long` queue with a wall time of 2 days and can retry up to 3 times before suite stalls (failures are usually due to running out of time while performing a concatenation).
   * Only one `mip_concatenate_batch_<stream>` task can run at one time.
   * Issues can be identified using
     ```bash
     grep CRITICAL $CDDS_PROC_DIR/convert/log/mip_concatenate_*.log
     ```
     if any critical issues arise or tasks fail update your _CDDS operational simulation ticket_ and contact the [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice.
   * Output data is written to 
     ```bash
     $CDDS_DATA_DIR/output/<stream>/<MIP table>/<variable name>/<files>
     ```
* `run_qc_<stream>`
  * Run the QC process on output data for this stream
  * Produces a report at
    ```bash
    $CDDS_PROC_DIR/qualitycheck/report_<stream>_<datestamp>.json
    ```
    and a list of variables which pass the quality checks at
    ```bash
    $CDDS_PROC_DIR/qualitycheck/approved_variables_<stream>_<datestamp>.txt
    ```
    and a log file at
    ```bash
    $CDDS_PROC_DIR/qualitycheck/log/qc_run_and_report_<stream>_<datestamp>.log
    ```
  * An example of a clean QC report can be found at wiki:Quality/ExampleJSONReport and the approved variables file will have one line per successfully produced dataset of the form `<MIP table>/<variable name>;<Directory containing files>`
  * This task will fail if any QC issues are found and will not resubmit. If this occurs please update your _CDDS operational simulation ticket_ and contact the [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice. 
`run_transfer_<stream>`
  * Archive data for variables that are marked active in the _requested variables file_ produced by CDDS Prepare and have successfully passed the QC checks, i.e. are listed in the approved variables file.
  * Will not automatically retry, even if failure was due to MASS/MOOSE issues.
  * the location in MASS to which these data are archived is determined by the `--output_mass_suffix` argument specified in the `cdds_convert` command above.
  * Task will fail if
    * There are MASS issues: For example if the following command returns anything there has been a MASS outage and you can re-trigger the task:
      ```bash
      grep SSC_STORAGE_SYSTEM_UNAVAILABLE $CDDS_PROC_DIR/archive/log/cdds_store_<stream>_<date stamp>.log
      ```
     * An attempt is made to archive data that already exists in MASS. If this occurs please update your _CDDS operational simulation ticket_ and contact the [CDDS Team](mailto:cdds@metoffice.gov.uk) for advice. **VERY IMPORTANT: do not delete data from MASS without consultation with [Matt Mizielinski](mailto:matthew.mizielinski@metoffice.gov.uk).**

If all goes well the suite will complete and you will receive an email confirming that the suite has shutdown containing content of the form
  ```
  Message: AUTOMATIC
  See: http://fcm1/cylc-review/taskjobs/<user id>/<suite name>
  ```

## Prepare _CDDS operational simulation ticket_ for review & submission
Once all suites for a particular package have completed (use `cylc gscan` or cylc review to monitor this) update your _CDDS operational simulation ticket_ confirming that the Extract, Convert, QC and Transfer tasks have been completed.

1. Copy the request JSON file and any logs to `$CDDS_PROC_DIR`
    ```bash
    cp request.json *.log $CDDS_PROC_DIR/
    ```
2. **Ticket**: Add a comment to the _CDDS operational simulation ticket_ specifying the archived data is ready for submission, and include the full path of the `$CDDS_PROC_DIR` and `$CDDS_DATA_DIR` locations.
3. Select `assign for review to` on the _CDDS operational simulation ticket_ (so that the status is `reviewing`) and assign the _CDDS operational simulation ticket_ to Matthew Mizielinski by selecting this name from the list
4. The ticket will then be reviewed according to the [wiki:SimulationTicketReview CDDS review procedure] by members of the CDDS team.

The review script used by the CDDS team involves running the following command
```bash
cdds_sim_review $CDDS_PROC_DIR $CDDS_DATA_DIR
```
checking any CRITICAL issues and following up any other anomalies.


## Run CDDS Teardown

1. Once the approved ticket has been returned to you following submission, delete the contents of the data directory:
    ```bash
    cd $CDDS_DATA_DIR
    rm -rf input output
    ```
2. Delete all suites used:
    ```bash
    rose suite-clean cdds_<model_id>_<experiment_id>_<variant_label>_<stream>
    ```
    for each `<stream>` processed, or 
    ```bash
    ls -d ~/cylc-run/cdds_<model_id>_<experiment_id>_<variant_label>_* | xargs rose suite-clean -y
    ```
    which should find and clear all suites associated with the model, experiment and variant label specified.

3. **Ticket**: Update and close the _CDDS operational simulation ticket_
  