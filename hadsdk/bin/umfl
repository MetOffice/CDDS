#!/usr/bin/ksh
# (C) British Crown Copyright 2015-2021, Met Office.
# Please see LICENSE.rst for license details.
#
# SYNOPSIS:
#   umfl -b date [-c date] -e date [-f format] [-i reinit] [-n] -r runid -s stream [-v] [-M]
#
# DESCRIPTION:
# umfl is a wrapper script for Python script umfilelist.py.
# The script writes, to standard output, a list of expected 
# UM PP file names for a runid/stream. Option -v will include
# the valid start date and valid end date for each file name
# in the output. Alternatively, by specifying option -M, the
# script will write out the differences between the list of 
# expected file names and the file names listed in MASS-R.
# If -M is specified, then option -v is ignored.
#
# The following must be specified:-
#
#     runid      (option -r)
#     stream     (option -s)
#     start date (option -b)
#     end date   (option -e)
#
# The following options may modify the number of file names
# generated:-
#
#     the climate meaning reference date  (option -c)
#     the reinitialisation period in days (option -i). Daily streams only.
#     exclude trailing dates              (option -n). Daily streams only.
#
#       Trailing dates are dates that fall between the last full 
#       reinitialisation interval and the end date (option -e).
#       
# The following options will modify the file names generated
#
#     UM file naming format       (option -f)
#
# EXAMPLE: 
#  Compare expected PP file names against MASS-R for stream ajaye/opm.  
#
#  umfl -r ajaye -s opm -b 185912010000 -e 199903010000 -c 185912010000 -M
#
#  /opt/moose-client-wrapper/bin/moo ls moose:/crum/ajaye/opm.pp
#
#  5 files expected but not found in MASS-R:-
#  ajayeo.pmb6apr.pp
#  ajayeo.pmb6feb.pp
#  ajayeo.pmb6jun.pp
#  ajayeo.pmb6mar.pp
#  ajayeo.pmb6may.pp
#
#  1 files found in MASS-R but not expected:-
#  ajayeo.pmj9mar.pp
#
#######################################################################

Iam=$(basename $0)

# Valid options
#
ValidOptions () {
   echo "usage: $Iam -b date [-c date] -e date [-f format] [-i reinit] [-m] [-n] -r runid -s stream [-v] [-M]"
   echo "options   -b date      Start date for the runid (YYYYMMDDhhmm)."
   echo "          -c date      Atmosphere/Ocean climate meaning reference date (YYYYMMDDhhmm). Default is 185912010000."
   echo "          -e date      End date for the runid (YYYYMMDDhhmm)."
   echo "          -f format    UM file name format: standard, short, long. Default is standard."
   echo "          -i days      Reinitialisation interval (daily streams only)."
   echo "          -m           Use new UM file naming convention."
   echo "          -n           Exclude trailing dates (daily streams only)."
   echo "          -r runid     Experiment runid."
   echo "          -s stream    Experiment stream."
   echo "          -v           For each file, list: filename, valid start time, valid end time. (Ignored if option -M specified)"
   echo "          -M           Instead of listing the files, compare them against the listing in MASS-R."
   exit $1
}

# Start and end dates
#
sdate=""
edate=""

# Reinintialisation interval
#
reinit="0"

# Runid
#
runid=""

# Stream
#
stream=""

# Submodels
#
atmos="a"
ocean="o"

# Climate meaning reference dates for atmosphere and ocean
#
cmrdate_default="185912010000"
cmrdate=""

# UM file naming format.
#
umformat="--standard_absolute_time"
newmode=""

# Use PP file suffix
#
suffix=".pp"

notrail=""
compare=""
validdates=""

# Expected length (+ 1) of date string arguments.
#
dtlength=13;

# Parse arguments
#
set -- $(getopt b:c:e:f:i:mnr:s:vM $* ) || ValidOptions 1

while [ $1 != -- ]
do
  case $1 in
    -b) sdate=$2;
        arglen=$(echo $sdate | wc -c);
        if [[ $arglen -ne $dtlength ]]; then
           echo "$Iam: ERROR: option -c: Invalid argument (use format YYYYMMDDhhmm): $sdate";
           exit 1; 
        fi;
        shift 2;;
    -c) cmrdate=$2;
        arglen=$(echo $cmrdate | wc -c);
        if [[ $arglen -ne $dtlength ]]; then
           echo "$Iam: ERROR: option -c: Invalid argument (use format YYYYMMDDhhmm): $cmrdate";
           exit 1; 
        fi;
        shift 2;;
    -e) edate=$2;
        arglen=$(echo $edate | wc -c);
        if [[ $arglen -ne $dtlength ]]; then
           echo "$Iam: ERROR: option -c: Invalid argument (use format YYYYMMDDhhmm): $edate";
           exit 1; 
        fi;
        shift 2;;
    -f) format=$2; 
        if [[ "$format" == "short" ]]; then
           umformat="--short_absolute_time"
        elif [[ "$format" == "long" ]]; then
           umformat="--long_absolute_time"
        elif [[ "$format" == "standard" ]]; then
           umformat="--standard_absolute_time"
        else
           echo "$Iam: ERROR: option -f: Invalid UM file naming format: \"$format\".";
           echo "Valid UM file naming formats: \"short\", \"long\", \"standard\"."
           exit 1; 
        fi;
        shift 2;;
    -i) reinit=$2; shift 2;;
    -m) newmode="--newmode"; shift;;
    -n) notrail="--notrail"; shift;;
    -r) runid=$2; shift 2;;
    -s) stream=$2; shift 2;;
    -v) validdates="--valid_dates"; shift;;
    -M) inventory="--compare=MASS-R"; shift;;
     *) echo $Iam: bad option $1; ValidOptions 1 >&2;;
  esac;
done
shift

# Check that a runid has been supplied
#
if [ "x"$runid == "x" ]; then
   echo "$Iam: ERROR: Supply runid (option -r)."
   exit 1
fi

# Check that a stream has been supplied
#
if [ "x"$stream == "x" ]; then
   echo "$Iam: ERROR: Supply stream (option -s)."
   exit 1
else
   submodel=$(echo $stream | cut -c 1)
   if [[ $submodel != $atmos ]] && [[ $submodel != $ocean ]]; then
      echo "$Iam: ERROR: Stream \"$stream\" contains unknown submodel: \"$submodel\". Valid submodels are: \"a\" or \"o\"."
      exit 1
   fi
fi

# Check that start and end date options have been selected.
#
if [[ -z $sdate ]] || [[ -z $edate ]]; then
   echo "$Iam: ERROR: Supply both start and end dates (options -b and -e)."
   exit 1
fi

# Warning if using the default climate meaning reference date.
#
if [[ -z $cmrdate ]]; then
   echo "$Iam: WARNING: Using default climate meaning reference date: $cmrdate_default."
   cmrdate=$cmrdate_default
fi

########################################################################
# Create either a list of unique expected files for the runid/stream   #
# or a list of differences when compared with the specified inventory. #
########################################################################

umfilelist.py --prefix=$runid --stream=$stream --suffix=$suffix --startdate=$sdate --enddate=$edate --cmrdate=$cmrdate --reinit=$reinit $notrail $newmode $umformat $validdates $inventory --stdout

exit 0
