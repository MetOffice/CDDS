#!/usr/bin/env python3.8
# (C) British Crown Copyright 2017-2022, Met Office.
"""
Run all the tests in the CDDS packages.
"""
import datetime
import os
import subprocess
import sys

CDDS_DIR = os.path.dirname(os.path.realpath(__file__))
LOG_NAME = os.path.join(CDDS_DIR, 'cdds_test_failures.log')
ROOT_COMMAND = 'python setup.py nosetests'
TESTS_TO_RUN = {
    'cdds': ['--with-doctest', '-a slow', '-a integration', '-a data_request'],
    'cdds_template': ['--with-doctest', '-a slow'],
    'cdds_qc': ['--with-doctest -s'],
    'cdds_qc_plugin_cf17': ['--with-doctest'],
    'cdds_qc_plugin_cmip6': ['--with-doctest'],
    'hadsdk': ['--with-doctest', '-a integration', '-a slow', '-a data_request'],
    'mip_convert': ['--with-doctest', '-a integration', '-a mappings', '-a slow'],
    'transfer': ['--with-doctest', '-a slow'],
}


def red_bold(text):
    """
    Add unicode marker to print the given text red and bold
    """
    start = '\033[1m\033[91m'
    end = '\033[00m\033[0;0m'
    return '{}{}{}'.format(start, text, end)


def green_bold(text):
    """
    Add unicode marker to print the given text green and bold
    """
    start = '\033[1m\033[92m'
    end = '\033[00m\033[0;0m'
    return '{}{}{}'.format(start, text, end)


def main():
    """
    Run all the tests in the CDDS packages.
    """
    exit_code = 0
    if os.path.exists(LOG_NAME):
        os.remove(LOG_NAME)

    for package, tests in TESTS_TO_RUN.items():
        os.chdir(os.path.join(CDDS_DIR, package))
        print('Executing tests for {}:'.format(package))
        for test in tests:
            command = '{} {}'.format(ROOT_COMMAND, test)
            print('--> {} {}'.format(command, (46 - len(command)) * '.'), end=''),
            sys.stdout.flush()
            process = subprocess.Popen(command.split(), stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE)
            stdoutdata, stderrdata = process.communicate()
            if process.returncode == 0:
                info = stderrdata.decode('utf-8').split('\n')
                msg = '[{}: {}]'.format(info[-2], info[-4])
                print('success! {}'.format(msg))
            else:
                exit_code = 1
                print('failed!\n!!! Please see "{}" for more details'.format(
                    LOG_NAME))
                current_date = datetime.datetime.now()
                msg = '{}: {}: {}\n\n'.format(current_date, package, command)
                with open(LOG_NAME, 'a') as file_handle:
                    file_handle.write(msg)
                    file_handle.write(stdoutdata.decode('utf-8'))
                    file_handle.write(stderrdata.decode('utf-8'))
                    file_handle.write('\n')

    if exit_code == 0:
        smiling_face = u'\U0001f604'
        print('\n{}'.format('+' * 46))
        print('{} {}'.format(green_bold('All tests succeed'), smiling_face))
    else:
        sad_face = u'\U0001F627'
        print('\n{}'.format('+' * 46))
        print('{} {}'.format(red_bold('Some tests failed.'), sad_face))
    return exit_code


if __name__ == '__main__':
    sys.exit(main())
