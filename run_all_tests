#!/usr/bin/env python3.8
# (C) British Crown Copyright 2017-2022, Met Office.
"""
Run all the tests in the CDDS packages.
"""
import datetime
import os
import subprocess
import sys

from timeit import default_timer as timer
from datetime import timedelta

CDDS_DIR = os.path.dirname(os.path.realpath(__file__))
LOG_NAME = os.path.join(CDDS_DIR, 'cdds_test_failures.log')
ROOT_COMMAND = 'py.test -s'
TESTS_TO_RUN = {
    'cdds': ['--doctest-modules', '-a slow', '-a integration', '-a data_request'],
    'mip_convert': ['--doctest-modules', '-a integration', '-a mappings', '-a slow'],
    }

ADDITIONAL_OPTS = {
    'cdds': ['--ignore-glob=cdds/cdds/deprecated/transfer/examples']
}


def _print_red(text):
    """
    Print text in red
    """
    print('\033[31m', text, '\033[0m', sep='')


def _print_green(text):
    """
    Print text in green
    """
    print('\033[32m', text, '\033[0m', sep='')


def main():
    """
    Run all the tests in the CDDS packages.
    """
    exit_code = 0
    start = timer()
    for package, tests in TESTS_TO_RUN.items():
        print('\nExecuting tests for {}:'.format(package))
        for test in tests:
            command = ROOT_COMMAND.split()
            if package in ADDITIONAL_OPTS:
                command.extend(ADDITIONAL_OPTS[package])
            command.append(package)
            if test:
                command.extend(test.split(' ', 1))
            command_str = ' '.join(command)
            print('--> {} {}'.format(command_str, (46 - len(command_str)) * '.'), end=''),
            sys.stdout.flush()
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdoutdata, stderrdata = process.communicate()
            if process.returncode == 0:
                info = stdoutdata.decode('utf-8').split('\n')
                msg = info[-2].replace('=', '').strip()
                _print_green('{} success! [{}]'.format(' ' * 3, msg))
            else:
                exit_code = 1
                _print_red('{} failed!\n!!! Please see "{}" for more details'.format(' ' * 3, LOG_NAME))
                current_date = datetime.datetime.now()
                msg = '{}: {}: {}\n\n'.format(current_date, package, command)
                with open(LOG_NAME, 'a') as file_handle:
                    file_handle.write(msg)
                    file_handle.write(stdoutdata.decode('utf-8'))
                    file_handle.write(stderrdata.decode('utf-8'))
                    file_handle.write('\n')
    end = timer()
    elapsed_time = timedelta(seconds=end - start)
    print('\n{}'.format('+' * 46))
    print('Elapsed time: {}'.format(elapsed_time))
    if exit_code == 0:
        smiling_face = u'\U0001f604'
        print('{} {}'.format(_print_green('All tests succeed.'), smiling_face))
    else:
        sad_face = u'\U0001F627'
        print('{} {}'.format(_print_red('Some tests failed.'), sad_face))
    return exit_code


if __name__ == '__main__':
    sys.exit(main())
