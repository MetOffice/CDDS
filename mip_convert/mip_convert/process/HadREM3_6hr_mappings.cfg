# THIS FILE IS PART OF CDDS
# Copyright (C) British Crown (Met Office) & Contributors.
# Licenced under the BSD 3 clause license https://opensource.org/license/bsd-3-clause
# See the LICENSE file in the top level of this repository for full details.
#
# This 'model to MIP mappings' configuration file contains sections
# for each 'MIP requested variable name' that has a common
# 'model to MIP mapping'. Please see the 'User Guide' for more
# information.


[DEFAULT]
mip_table_id = 6hr
positive = None
reviewer = N/A
status = embargoed

[clivi]
component = cftables cloud
dimension = longitude latitude time
expression = m01s02i392[lbproc=0]
units = kg m-2

[clwvi]
component = cftables cloud
dimension = longitude latitude time
expression = m01s02i391[lbproc=0] + m01s02i392[lbproc=0]
units = kg m-2

[hus850]
component = atmos-physics
dimension = longitude latitude plev850 time
expression = m01s30i205[blev=P850, lbproc=0] / m01s30i301[blev=P850, lbproc=0]
units = 1

[mrfso]
component = snow-permafrost
dimension = longitude latitude time
expression = level_sum(m01s08i223[lbproc=0]
    * m01s08i230[lbproc=0]
    / (m01s08i230[lbproc=0] + m01s08i229[lbproc=0]))
units = kg m-2

[mrso]
component = land
dimension = longitude latitude time
expression = level_sum(m01s08i223[lbproc=0])
units = kg m-2

[prw]
component = atmos-physics
dimension = longitude latitude time
expression = m01s30i461[lbproc=0]
units = kg m-2

[snc]
comment = A threshold is applied to determine whether a tile is covered
    in snow or not - if a tile has more than 0.1 kg/m2 of snow it is
    considered as covered with snow, if less then there is no snow. This
    means other snow diagnostics may indicate snow but this diagnostic is
    zero. We have not applied a threshold to the other snow diagnostics
    (unless explicitly noted) to preserve mass conservation.
component = snow-permafrost
dimension = longitude latitude time
expression = snc_calc(m01s08i236[lbproc=0], m01s03i317[lbproc=0], m01s03i395[lbproc=0])
units = %

[snd]
comment = This includes snow on the canopy of the needleleaf trees.
component = snow-permafrost
dimension = longitude latitude time
expression = land_class_mean(m01s08i376[lbproc=0], m01s03i317[lbproc=0], land_class='all')
units = m

[snw]
comment = This includes snow on the canopy of the needleleaf trees.
component = snow-permafrost
dimension = longitude latitude time
expression = m01s00i023[lbproc=0]
units = kg m-2

[ta200]
component = atmos-physics
dimension = longitude latitude plev200 time
expression = m01s30i204[blev=P200, lbproc=0]
    / m01s30i301[blev=P200, lbproc=0]
units = K

[ta500]
component = atmos-physics
dimension = longitude latitude plev500 time
expression = m01s30i204[blev=P500, lbproc=0]
    / m01s30i301[blev=P500, lbproc=0]
units = K

[ta850]
component = atmos-physics
dimension = longitude latitude plev850 time
expression = m01s30i204[blev=P850, lbproc=0]
    / m01s30i301[blev=P850, lbproc=0]
units = K

[ts]
comment = "skin" temperature (i.e., SST for open ocean).
component = atmos-physics boundary-layer
dimension = longitude latitude time
expression = m01s00i024[lbproc=0]
units = K

[ua200]
component = atmos-physics
dimension = longitude latitude plev19 time
expression = urot_calc(m01s30i201[blev=P200,lbproc=0]/m01s30i301[blev=P200,lbproc=0],m01s30i202[blev=P200,lbproc=0]
    /m01s30i301[blev=P200,lbproc=0])
units = m s-1

[ua500]
component = atmos-physics
dimension = longitude latitude plev19 time
expression = urot_calc(m01s30i201[blev=P500,lbproc=0]/m01s30i301[blev=P500,lbproc=0],m01s30i202[blev=P500,lbproc=0]
    /m01s30i301[blev=P500,lbproc=0])
units = m s-1

[ua850]
component = atmos-physics
dimension = longitude latitude plev19 time
expression = urot_calc(m01s30i201[blev=P850,lbproc=0]/m01s30i301[blev=P850,lbproc=0],m01s30i202[blev=P850,lbproc=0]
    /m01s30i301[blev=P850,lbproc=0])
units = m s-1

[uas]
component = boundary-layer
dimension = longitude latitude height10m time
# processor does not exist
expression = urot_calc_6h(m01s03i225[lbproc=0], m01s03i226[lbproc=0])
units = m s-1

[va200]
component = atmos-physics
dimension = longitude latitude plev200 time
expression = vrot_calc(m01s30i201[blev=P200,lbproc=0]/m01s30i301[blev=P200,lbproc=0],m01s30i202[blev=P200,lbproc=0]
    /m01s30i301[blev=P200,lbproc=0])
units = m s-1

[va500]
component = atmos-physics
dimension = longitude latitude plev500 time
expression = vrot_calc(m01s30i201[blev=P500,lbproc=0]/m01s30i301[blev=P500,lbproc=0],m01s30i202[blev=P500,lbproc=0]
    /m01s30i301[blev=P500,lbproc=0])
units = m s-1

[va850]
component = atmos-physics
dimension = longitude latitude plev850 time
expression = vrot_calc(m01s30i201[blev=P850,lbproc=0]/m01s30i301[blev=P850,lbproc=0],m01s30i202[blev=P850,lbproc=0]
    /m01s30i301[blev=P850,lbproc=0])
units = m s-1

[vas]
component = boundary-layer
dimension = longitude latitude height10m time
#processor does not exist
expression = vrot_calc_6h(m01s03i225[lbproc=0],m01s03i226[lbproc=0])
units = m s-1

[zg200]
component = atmos-physics
dimension = longitude latitude plev200 time
expression = m01s30i207[blev=P200, lbproc=0] / m01s30i301[blev=P200, lbproc=0]
units = m

[zg500]
component = atmos-physics
dimension = longitude latitude plev500 time
expression = m01s30i207[blev=P500, lbproc=0] / m01s30i301[blev=P500, lbproc=0]
units = m

[zmla]
component = boundary-layer
dimension = longitude latitude time
expression = m01s00i025[lbproc=0]
units = m